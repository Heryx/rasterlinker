# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GPRDialog
                                 A QGIS plugin
 GPR
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-04-23
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Giuseppe
        email                : guarino.archeo@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.core import QgsProject, QgsRasterLayer, QgsLayerTreeGroup, QgsLayerTreeLayer
from qgis.PyQt import QtWidgets, uic, QtCore
from qgis.PyQt.QtWidgets import QInputDialog, QFileDialog
from PyQt5.QtGui import QStandardItem, QStandardItemModel



# Questo carica il file .ui in modo che PyQt possa popolare il plugin con gli elementi dal Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'gpr_linker_dialog_base.ui'))


class GPRDialog(QtWidgets.QDialog, FORM_CLASS):
    
    def __init__(self, parent=None):
        """Constructor."""
        super(GPRDialog, self).__init__(parent)
    
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        self.setupUi(self)

        """Inizializzazione degli attributi"""
        # Initialize the standard item model for the list view
        self.list_model = QStandardItemModel()
        self.listView.setModel(self.list_model)  # Set the model for the list view
        # Find the dial in the dialog layout
        self.dial = self.findChild(QtWidgets.QDial, "dial")
        self.dial.setEnabled(False)  # Disable the dial initially

        """Connessione dei segnali agli slot"""
        # Connect the "Sfoglia" button
        self.Sfoglia.clicked.connect(self.browse_rasters)
        # Connect the valueChanged signal of the dial to the toggle_raster_visibility method
        self.dial.valueChanged.connect(self.toggle_raster_visibility)
        # Connect the signal for the checkbox state change
        self.listView.clicked.connect(self.toggle_group_visibility)
        #connesso al populate group list widget
#        self.listView.clicked.connect(self.on_group_list_item_clicked)

        """Popolazione iniziale della lista dei gruppi"""
        # Populate the group list initially
        self.populate_group_list()  # Call the method here

        """Popolazione della lista delle checkbox dei gruppi"""
        # Populate the group checkbox list after populating the group list
        self.populate_group_checkbox_list()  # Call the method here

        self.plugin_created_groups = []

        """Popolazione della lista dei gruppi creati dal plugin"""
        # Call traverse_layer_tree to populate plugin_created_groups list
        root = QgsProject.instance().layerTreeRoot()
        self.traverse_layer_tree(root)
        
    def populate_group_list(self):
        print("Populating group list...")
        # Ottieni il modello esistente
        model = self.list_model

        # Rimuovi tutte le righe esistenti per evitare duplicati
        model.removeRows(0, model.rowCount())
        root = QgsProject.instance().layerTreeRoot()

        if root:
            for child in root.children():
                if isinstance(child, QgsLayerTreeGroup):
                    print(f"Found group: {child.name()}")
                    item = QStandardItem(child.name())
                    model.appendRow(item)

        # Aggiorna esplicitamente la lista per visualizzare i nuovi dati
        self.listView.setModel(model)
        print("End populating group list...")  # Aggiornamento esplicito della lista per visualizzare i nuovi dati


    def populate_group_checkbox_list(self):
        """Populate the QListView with checkboxes for each group in the TOC."""
        root = QgsProject.instance().layerTreeRoot()
        self.list_model.clear()  # Clear the model

        for child in root.children():
            if isinstance(child, QgsLayerTreeGroup):
                item = QStandardItem(child.name())
                item.setCheckable(True)  # Make the item checkable
                self.list_model.appendRow(item)

    def load_rasters_into_group(self, raster_files, group_name):
        # Load raster files into the specified group.
        group = QgsProject.instance().layerTreeRoot().findGroup(group_name)

        if not group:
            # If the group doesn't exist, create it
            group = QgsLayerTreeGroup(group_name)
            QgsProject.instance().layerTreeRoot().addChildNode(group)
            self.plugin_created_groups.append(group_name)

        for file in raster_files:
            layer = QgsRasterLayer(file, os.path.basename(file))
            if layer.isValid():
                QgsProject.instance().addMapLayer(layer, False) #Questa stringa inserisce i raster direttamente nella TOC
                layer_node = QgsLayerTreeLayer(layer)
                group.insertChildNode(0, QgsLayerTreeLayer(layer))
            else:
                print(f"Unable to load raster file: {file}")


    def toggle_group_visibility(self, index):
        #Toggle group visibility based on the checkbox state.
        item = self.list_model.itemFromIndex(index)
        if item is not None:
            if item.checkState() == QtCore.Qt.Checked:
                # Enable the dial when at least one group is checked
                self.dial.setEnabled(True)
            else:
                # Disable the dial if no group is checked
                self.dial.setEnabled(False)


    def toggle_raster_visibility(self, value):
        """Toggle raster visibility based on the dial value."""
        selected_index = self.listView.selectedIndexes()
        if selected_index:
            group_name = selected_index[0].data()
            group = QgsProject.instance().layerTreeRoot().findGroup(group_name)
            if group:
                layer_nodes = [child for child in group.children() if isinstance(child, QgsLayerTreeLayer)]
                if layer_nodes:
                    # Disable the previous raster
                    previous_index = value - 1 if value > 0 else len(layer_nodes) - 1
                    if previous_index < len(layer_nodes):
                        previous_layer_node = layer_nodes[previous_index]
                        previous_layer_node.setItemVisibilityChecked(False)

                    # Enable the current raster
                    current_index = value
                    if current_index < len(layer_nodes):
                        current_layer_node = layer_nodes[current_index]
                        current_layer_node.setItemVisibilityChecked(True)
                else:
                    print("No raster layers in the selected group.")
            else:
                print(f"No group found with name: {group_name}")
        else:
            print("No group selected.")
        

    def update_dial_range(self):
        #Update the range of the dial based on the number of raster layers in the selected group.
        selected_index = self.listView.selectedIndexes()
        if selected_index:
            group_name = selected_index[0].data()
            group = QgsProject.instance().layerTreeRoot().findGroup(group_name)
            if group:
                layer_nodes = [child for child in group.children() if isinstance(child, QgsLayerTreeLayer)]
                if layer_nodes:
                    self.dial.setRange(0, len(layer_nodes) - 1)
                else:
                    print("No raster layers in the selected group.")
            else:
                print(f"No group found with name: {group_name}")
        else:
            print("No group selected.")


    def browse_rasters(self):
        # Open the file dialog to select raster files.
        files, _ = QFileDialog.getOpenFileNames(self, "Select raster files", "/", "Raster files (*.tif *.tiff *.png *.jpg)")
        if files:
            print("Selected raster files:", files)
            # Open a dialog to input the group name
            group_name, ok = QInputDialog.getText(self, "Enter Group Name", "Group Name:")
            if ok:
                # Call load_rasters_into_group after importing the raster files
                self.load_rasters_into_group(files, group_name)
                # Update the group list after loading the raster files
                self.populate_group_checkbox_list()
                # Set the range of the dial based on the number of raster layers in the group
                self.update_dial_range()

        # Funzione per caricare i raster in un gruppo specificato
    """
    def on_group_list_item_clicked(self, index):
        # Gestisce l'evento del clic sugli elementi della lista
        item = self.list_model.itemFromIndex(index)
        if item is not None:
            selected_group_name = item.text()
            print("Selected group:", selected_group_name)

    """
    # Funzione per alternare la visibilitÃ  dei raster all'interno del gruppo
    def traverse_layer_tree(self, node):
        # Recursive method to traverse all groups in the layer tree
        if isinstance(node, QgsLayerTreeGroup):
            group_name = node.name()
            if group_name not in self.plugin_created_groups:
                self.plugin_created_groups.append(group_name)
            for child in node.children():
                self.traverse_layer_tree(child)


